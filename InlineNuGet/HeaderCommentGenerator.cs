using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Medallion.Tools
{ 
    internal static class HeaderCommentGenerator
    {
        public static SyntaxNode AddHeaderComment(SyntaxNode document, string nuspec)
        {
            var parsedNuspec = XDocument.Load(nuspec);
            var ns = parsedNuspec.Root.Name.Namespace;
            var packageName = parsedNuspec.Descendants(ns + "id").Single().Value;
            var packageVersion = parsedNuspec.Descendants(ns + "version").Single().Value;

            var sb = new StringBuilder();
            var outerLine = new string('/', 80);
            sb.AppendLine(outerLine);

            sb.AppendLine($"// PACKAGE {packageName} {packageVersion}")
                .AppendLine("//");

            sb.AppendLine($"// The code in this file was AUTO-GENERATED by installing the {packageName} NuGet package.")
                .AppendLine($"// To update, run Update-Package {packageName} in the NuGet package manager console.")
                .AppendLine("//")
                .AppendLine("// You can modify this file without changing its source by setting")
                .AppendLine("// preprocessor directives referenced here in your project properties");

            sb.AppendLine(outerLine)
                .AppendLine();

            var commentTrivia = SyntaxFactory.ParseLeadingTrivia(sb.ToString());

            var updated = document.WithLeadingTrivia(commentTrivia.AddRange(document.GetLeadingTrivia()));
            return updated;
        }
    }
}
