using Medallion.Collections;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace Medallion.Random
{
    public class JavaRandomTest
    {
        #region ---- Overlapping Methods ----
        [Fact]
        public void TestNext()
        {
            var random = Rand.CreateJavaRandom(long.MaxValue);
            var values = Enumerable.Range(0, 100)
                .Select(_ => random.Next())
                .ToArray();
            Assert.True(
                values.SequenceEqual(new[] { 577549913, 943952225, 26349579, 1176895439, 1421815604, 1290198438, 894294477, 857465478, 1774177765, 121412731, 1730951808, 665220512, 121954317, 149520196, 176890342, 1481972250, 1552485069, 1938353972, 1201094686, 1570944655, 1286832617, 754206257, 1997687263, 975495143, 1335117720, 720466900, 499582545, 6265644, 378035946, 325038220, 1742348424, 1490692733, 512654038, 226558178, 232543901, 1495693083, 1280529375, 753494743, 2029142123, 617859745, 470117987, 185130857, 170887139, 1121888592, 1605548928, 928184884, 923208973, 1882898312, 275717795, 668457270, 1863258011, 397472851, 388596142, 785608363, 1710233643, 1067111196, 847626693, 426561303, 818346778, 1210424957, 837574326, 246750562, 1814949631, 1272610358, 535131907, 1544410909, 891703499, 1968069177, 1298348684, 1201169122, 987516795, 1999836385, 1836621277, 1984750298, 56056183, 682423875, 1874573330, 1207201113, 356369803, 703216285, 1809831267, 1470295459, 444584319, 161994220, 1233774672, 227479250, 2057678932, 44932761, 883073898, 1533719247, 2034106910, 964505939, 588522939, 1959040894, 690335609, 26345464, 26592211, 2040785910, 767017641, 1271274924, }),
                string.Join(",", values)
            );
        }

        [Fact]
        public void TestNextWithBound()
        {
            var random = Rand.CreateJavaRandom(9000000000L);
            var values = Enumerable.Range(1, count: 100)
                .Select(i => random.Next(i))
                .ToArray();
            Assert.True(
                values.SequenceEqual(new[] { 0, 0, 2, 2, 4, 1, 6, 7, 1, 5, 4, 4, 9, 6, 5, 1, 13, 3, 0, 3, 19, 21, 2, 18, 0, 15, 23, 25, 16, 9, 0, 30, 32, 14, 13, 9, 33, 20, 14, 19, 8, 30, 31, 14, 43, 16, 45, 26, 1, 41, 24, 18, 24, 38, 37, 17, 36, 8, 21, 16, 6, 60, 44, 30, 50, 57, 8, 19, 52, 51, 33, 58, 12, 66, 49, 74, 41, 30, 6, 56, 41, 9, 1, 7, 17, 54, 15, 29, 69, 69, 35, 14, 46, 91, 70, 80, 95, 12, 8, 46, }),
                string.Join(",", values)
            );
        }

        [Fact]
        public void TestNextDouble()
        {
            var random = Rand.CreateJavaRandom(12345);
            Assert.Equal(actual: random.NextDouble(), expected: 0.3618031071604718, precision: 15);
            Assert.Equal(actual: random.NextDouble(), expected: 0.932993485288541, precision: 15);
            Assert.Equal(actual: random.NextDouble(), expected: 0.8330913489710237, precision: 15);
        }

        [Fact]
        public void TestNextBytes()
        {
            var random = Rand.CreateJavaRandom(long.MinValue);
            var bytes = new byte[100];
            random.NextBytes(bytes);
            var sBytes = bytes.Select(b => unchecked((sbyte)b)).ToArray();
            Assert.True(
                sBytes.SequenceEqual(new sbyte[] { 96, -76, 32, -69, 56, 81, -39, -44, 122, -53, -109, 61, -66, 112, 57, -101, -10, -55, 45, -93, 58, -16, 29, 79, -73, 112, -23, -116, 3, 37, -12, 29, 62, -70, -8, -104, 109, -89, 18, -56, 43, -51, 77, 85, 75, -16, -75, 64, 35, -62, -101, 98, 77, -23, -17, -100, 47, -109, 30, -4, 88, 15, -102, -5, 8, 27, 18, -31, 7, -79, -24, 5, -14, -76, -11, -16, -15, -48, 12, 45, 15, 98, 99, 70, 112, -110, 28, 80, 88, 103, -1, 32, -10, -88, 51, 94, -104, -81, -121, 37 }),
                string.Join(",", sBytes)
            );
        }
        #endregion

        #region ---- Java-only Methods ----
        [Fact]
        public void TestNextBoolean()
        {
            var random = Rand.CreateJavaRandom(-1L);
            var text = string.Join(string.Empty, Enumerable.Range(0, 150).Select(_ => random.NextBoolean() ? '1' : '0'));
            Assert.Equal(
                actual: text,
                expected: "000111001010000111111010100000110001101000011001001000100001001101011101110011001100101001100100010101010000100000110100001101110101010000101111101111"
            );
        }

        [Fact]
        public void TestNextInt32()
        {
            var random = Rand.CreateJavaRandom(unchecked((long)0xaaaaaaaaaaaaaaaaUL));
            var values = Enumerable.Range(0, 50).Select(_ => random.NextInt32()).ToArray();
            Assert.Equal(
                actual: values,
                expected: new[] { -160299939, -621102429, -514766960, -1585973727, 1850643089, -242283619, -76335135, 2036374813, -929653626, 1474433229, -2066460749, 391003457, 841252568, 2057474302, -1928849546, -1192505696, -462353813, 1516538903, 1375907981, 891017933, -47884590, 65906611, -1835005867, 386846093, -1861429516, 1594052849, -700663963, 1033968846, -1946053652, -988239993, -463007465, -1419805736, 1420210737, 1082623517, 1930635079, -557937214, -2124176138, 1675705304, -953891238, -252261594, 1716827091, 1016646452, -1093751422, 1674350359, -133450075, -166608362, 527861567, -1365803181, -1488573519, -1623458015, }
            );
        }

        [Fact]
        public void TestNextInt64()
        {
            var random = Rand.CreateJavaRandom(-12345);

            var longs = Enumerable.Range(0, 50).Select(_ => random.NextInt64()).ToArray();
            Assert.Equal(
                actual: longs,
                expected: new[] { -6677394249205543830, 9027049167818715576, 677142854244467891, 7797062463273896581, -8146118902147941788, 8541563469759364503, -7887521925227135271, 7085088793470598970, -9004582945846855961, -5026785897581235574, 946852964286362140, 3914004843753249884, 1946839661014790731, 4818372777409355870, -748616985533749433, -2041155283140072324, -324902792424725779, -1583259276745116027, -2135178866985711257, -8683706266286395378, -3484795942468779601, -1098596652140882794, -8144534119733286318, -5542843131863796246, 3252294794835269238, -694787915639182645, 8521676944337934110, 9053634726238913485, -7862218998941084501, 6536009830126594689, -2630951074978448219, -678476696384827690, 2899669187879258043, -281328628757215557, 7468557800667028488, -9138763286251912183, 4282660729586700183, 6640613567269209248, 3279328004619751209, 3581944763145330895, -4647615857183675083, 8821213228945464313, -283534543217861329, 8889645167143787380, 3667002347789147917, 2196301899268057012, 7231250551090618118, 6726383595063172008, 7597312644876864924, -2382934589678016925, }
            );
        }

        [Fact]
        public void TestNextSingle()
        {
            var random = Rand.CreateJavaRandom(2);
            for (var i = 0; i < 1000; ++i)
            {
                random.NextInt32(); // spin
            }

            var values = Enumerable.Range(0, 50).Select(_ => random.NextSingle()).ToArray();
            Assert.Equal(
                actual: values,
                expected: new[] { 0.94287306f, 0.8903044f, 0.97903967f, 0.012356639f, 0.17383873f, 0.6793508f, 0.8875068f, 0.06914234f, 0.7914038f, 0.9430413f, 0.25484967f, 0.9709232f, 0.2722515f, 0.008735001f, 0.5167838f, 0.17015874f, 0.8142477f, 0.3411495f, 0.2899512f, 0.29670966f, 0.358271f, 0.1576863f, 0.38329488f, 0.90439373f, 0.46732223f, 0.9526825f, 0.30414647f, 0.4749437f, 0.21356344f, 0.7139307f, 0.2368964f, 0.7848527f, 0.58981174f, 0.45460987f, 0.5398049f, 0.81236047f, 0.36067104f, 0.939894f, 0.22092265f, 0.9285346f, 0.33370495f, 0.74295545f, 0.66506624f, 0.89385194f, 0.28724986f, 0.68099236f, 0.6538195f, 0.08884382f, 0.90368855f, 0.24754298f, },
                comparer: EqualityComparers.Create((float a, float b) => Math.Abs(a - b) < 1e-7)
            );
        }

        [Fact]
        public void TestNextGaussian()
        {
            var random = Rand.CreateJavaRandom(0);

            var sequence1 = Enumerable.Range(0, 50).Select(_ => random.NextGaussian()).ToArray();
            var sequence2 = Rand.CreateJavaRandom(0).NextGaussians().Take(50).ToArray();
            Assert.Equal(sequence1, sequence2);

            Assert.Equal(
                actual: sequence1,
                expected: new[] { 0.8025330637390305, -0.9015460884175122, 2.080920790428163, 0.7637707684364894, 0.9845745328825128, -1.6834122587673428, -0.027290262907887285, 0.11524570286202315, -0.39016704137993785, -0.6433888131264491, 0.052460907198835775, 0.5213420769298895, -0.8239670026881707, 0.26071819402835644, -0.4529877558422544, 1.4031473817209366, 0.27113061707020236, -0.007054015349837401, 0.9049586994113287, 0.8568542481006806, 0.3723340814425109, 0.3976728390023819, 0.06294576961546386, 0.9414599976474556, 0.44110379103508873, -0.7318797311599887, -0.01176361185227962, -0.15736219614735453, -0.5822582291186266, -0.2059701784999411, -0.39990122591137445, 0.8913156150655253, 0.41076063425965825, -1.1712365002966285, -0.3905082189100106, 0.49014040388330665, 0.9597752538041666, 0.7523861952143763, -0.657956415573505, 0.6450323331598297, -0.3154523215417022, 1.054894794114192, 0.5957831787424875, 1.0225509680217193, -2.3561969031359187, -1.5250681153426493, 1.1808572722180044, 0.006140951070945433, -0.13698941007400853, -0.42220793207202106, },
                comparer: EqualityComparers.Create((double a, double b) => Math.Abs(a - b) < 1e-15)
            );
        }
        #endregion
    }
}
